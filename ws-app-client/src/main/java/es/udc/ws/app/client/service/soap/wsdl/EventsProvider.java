package es.udc.ws.app.client.service.soap.wsdl;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "EventsProvider", targetNamespace = "http://soap.ws.udc.es/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface EventsProvider {


    /**
     * 
     * @param eventDto
     * @return
     *     returns es.udc.ws.app.client.service.soap.wsdl.EventDto
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addEvent", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AddEvent")
    @ResponseWrapper(localName = "addEventResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AddEventResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/addEventRequest", output = "http://soap.ws.udc.es/EventsProvider/addEventResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/EventsProvider/addEvent/Fault/SoapInputValidationException")
    })
    public EventDto addEvent(
        @WebParam(name = "eventDto", targetNamespace = "")
        EventDto eventDto)
        throws SoapInputValidationException
    ;

    /**
     * 
     * @param eventDto
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     * @throws SoapReduceAforoException
     * @throws SoapExpiredEventException
     */
    @WebMethod
    @RequestWrapper(localName = "updateEvent", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.UpdateEvent")
    @ResponseWrapper(localName = "updateEventResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.UpdateEventResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/updateEventRequest", output = "http://soap.ws.udc.es/EventsProvider/updateEventResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/EventsProvider/updateEvent/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/EventsProvider/updateEvent/Fault/SoapInstanceNotFoundException"),
        @FaultAction(className = SoapReduceAforoException.class, value = "http://soap.ws.udc.es/EventsProvider/updateEvent/Fault/SoapReduceAforoException"),
        @FaultAction(className = SoapExpiredEventException.class, value = "http://soap.ws.udc.es/EventsProvider/updateEvent/Fault/SoapExpiredEventException")
    })
    public void updateEvent(
        @WebParam(name = "eventDto", targetNamespace = "")
        EventDto eventDto)
        throws SoapExpiredEventException, SoapInputValidationException, SoapInstanceNotFoundException, SoapReduceAforoException
    ;

    /**
     * 
     * @param eventID
     * @throws SoapInstanceNotFoundException
     * @throws SoapEventHasAttendeesException
     */
    @WebMethod
    @RequestWrapper(localName = "removeEvent", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.RemoveEvent")
    @ResponseWrapper(localName = "removeEventResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.RemoveEventResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/removeEventRequest", output = "http://soap.ws.udc.es/EventsProvider/removeEventResponse", fault = {
        @FaultAction(className = SoapEventHasAttendeesException.class, value = "http://soap.ws.udc.es/EventsProvider/removeEvent/Fault/SoapEventHasAttendeesException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/EventsProvider/removeEvent/Fault/SoapInstanceNotFoundException")
    })
    public void removeEvent(
        @WebParam(name = "eventID", targetNamespace = "")
        Long eventID)
        throws SoapEventHasAttendeesException, SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param eventID
     * @return
     *     returns es.udc.ws.app.client.service.soap.wsdl.EventDto
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findEventById", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindEventById")
    @ResponseWrapper(localName = "findEventByIdResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindEventByIdResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/findEventByIdRequest", output = "http://soap.ws.udc.es/EventsProvider/findEventByIdResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/EventsProvider/findEventById/Fault/SoapInstanceNotFoundException")
    })
    public EventDto findEventById(
        @WebParam(name = "eventID", targetNamespace = "")
        Long eventID)
        throws SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param keywords
     * @param inicio
     * @param fin
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.EventDto>
     * @throws SoapInvalidRankDateException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findEvent", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindEvent")
    @ResponseWrapper(localName = "findEventResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindEventResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/findEventRequest", output = "http://soap.ws.udc.es/EventsProvider/findEventResponse", fault = {
        @FaultAction(className = SoapInvalidRankDateException.class, value = "http://soap.ws.udc.es/EventsProvider/findEvent/Fault/SoapInvalidRankDateException"),
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/EventsProvider/findEvent/Fault/SoapInputValidationException")
    })
    public List<EventDto> findEvent(
        @WebParam(name = "keywords", targetNamespace = "")
        String keywords,
        @WebParam(name = "inicio", targetNamespace = "")
        XMLGregorianCalendar inicio,
        @WebParam(name = "fin", targetNamespace = "")
        XMLGregorianCalendar fin)
        throws SoapInputValidationException, SoapInvalidRankDateException
    ;

    /**
     * 
     * @param eventId
     * @param type
     * @param user
     * @return
     *     returns es.udc.ws.app.client.service.soap.wsdl.ReplyDto
     * @throws SoapCompleteEventException
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     * @throws SoapExpiredEventException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "replyEvent", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReplyEvent")
    @ResponseWrapper(localName = "replyEventResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ReplyEventResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/replyEventRequest", output = "http://soap.ws.udc.es/EventsProvider/replyEventResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/EventsProvider/replyEvent/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapExpiredEventException.class, value = "http://soap.ws.udc.es/EventsProvider/replyEvent/Fault/SoapExpiredEventException"),
        @FaultAction(className = SoapCompleteEventException.class, value = "http://soap.ws.udc.es/EventsProvider/replyEvent/Fault/SoapCompleteEventException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/EventsProvider/replyEvent/Fault/SoapInstanceNotFoundException")
    })
    public ReplyDto replyEvent(
        @WebParam(name = "user", targetNamespace = "")
        String user,
        @WebParam(name = "eventId", targetNamespace = "")
        Long eventId,
        @WebParam(name = "type", targetNamespace = "")
        Boolean type)
        throws SoapCompleteEventException, SoapExpiredEventException, SoapInputValidationException, SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param eventId
     * @param type
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.ReplyDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRepliesByEvent", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.GetRepliesByEvent")
    @ResponseWrapper(localName = "getRepliesByEventResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.GetRepliesByEventResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/getRepliesByEventRequest", output = "http://soap.ws.udc.es/EventsProvider/getRepliesByEventResponse")
    public List<ReplyDto> getRepliesByEvent(
        @WebParam(name = "eventId", targetNamespace = "")
        Long eventId,
        @WebParam(name = "type", targetNamespace = "")
        Boolean type);

    /**
     * 
     * @param userId
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.ReplyDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getRepliesByUser", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.GetRepliesByUser")
    @ResponseWrapper(localName = "getRepliesByUserResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.GetRepliesByUserResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/getRepliesByUserRequest", output = "http://soap.ws.udc.es/EventsProvider/getRepliesByUserResponse")
    public List<ReplyDto> getRepliesByUser(
        @WebParam(name = "userId", targetNamespace = "")
        String userId);

    /**
     * 
     * @param userId
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.EventByUserDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "assistedEventsByUser", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AssistedEventsByUser")
    @ResponseWrapper(localName = "assistedEventsByUserResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AssistedEventsByUserResponse")
    @Action(input = "http://soap.ws.udc.es/EventsProvider/assistedEventsByUserRequest", output = "http://soap.ws.udc.es/EventsProvider/assistedEventsByUserResponse")
    public List<EventByUserDto> assistedEventsByUser(
        @WebParam(name = "userId", targetNamespace = "")
        String userId);

}